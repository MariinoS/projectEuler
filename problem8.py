# Project Euler: Problem 8 Source Code. By MariinoS. 7th Feb 2016.

# Task:   The four adjacent digits in the 1000-digit number that have the
#         greatest product are 9 × 9 × 8 × 9 = 5832.
#                 73167176531330624919225119674426574742355349194934
#                 96983520312774506326239578318016984801869478851843
#                 85861560789112949495459501737958331952853208805511
#                 12540698747158523863050715693290963295227443043557
#                 66896648950445244523161731856403098711121722383113
#                 62229893423380308135336276614282806444486645238749
#                 30358907296290491560440772390713810515859307960866
#                 70172427121883998797908792274921901699720888093776
#                 65727333001053367881220235421809751254540594752243
#                 52584907711670556013604839586446706324415722155397
#                 53697817977846174064955149290862569321978468622482
#                 83972241375657056057490261407972968652414535100474
#                 82166370484403199890008895243450658541227588666881
#                 16427171479924442928230863465674813919123162824586
#                 17866458359124566529476545682848912883142607690042
#                 24219022671055626321111109370544217506941658960408
#                 07198403850962455444362981230987879927244284909188
#                 84580156166097919133875499200524063689912560717606
#                 05886116467109405077541002256983155200055935729725
#                 71636269561882670428252483600823257530420752963450
#         Find the thirteen adjacent digits in the 1000-digit number that have
#         the greatest product. What is the value of this product?
#
# My Solution:

number = "731671765313306249192251196744265747423553491949349\
69835203127745063262395783180169848018694788518438586156078911294\
949545950173795833195285320880551112540698747158523863050715693290\
9632952274430435576689664895044524452316173185640309871112172238311\
36222989342338030813533627661428280644448664523874930358907296290491\
560440772390713810515859307960866701724271218839987979087922749219016\
9972088809377665727333001053367881220235421809751254540594752243525849\
07711670556013604839586446706324415722155397536978179778461740649551492\
908625693219784686224828397224137565705605749026140797296865241453510047\
4821663704844031998900088952434506585412275886668811642717147992444292823\
08634656748139191231628245861786645835912456652947654568284891288314260769\
004224219022671055626321111109370544217506941658960408071984038509624554443\
6298123098787992724428490918884580156166097919133875499200524063689912560717\
60605886116467109405077541002256983155200055935729725716362695618826704282524\
83600823257530420752963450"

largest = 0
for i in range(len(number) - 13):
    product = int(number[i]) * int(number[i+1]) * int(number[i+2]) * int(number[i+3])\
    * int(number[i+4]) * int(number[i+5]) * int(number[i+6]) * int(number[i+7])\
    * int(number[i+8]) * int(number[i+9]) * int(number[i+10]) * int(number[i+11])\
    * int(number[i+12])
    if product > largest:
        largest = product

print largest

# This solution works, however, it only works for a product of 13 adjacent digits.
# The code needs to be rewritten if we want a product of x adjacent digits where x != 13.
# I couldn't figure out a universal function with x as an argument of the function yet.
#
# Also, it should be better to have an int variable that stores the number,
# and a string variable that converts the integer into a string.
# That way, it would be easier to change the 1000-digit number.
# However, can an int variable carry such a large number?
